//example of some shaders compiled
flat basic.vs flat.fs
texture basic.vs texture.fs
depth quad.vs depth.fs
multi basic.vs multi.fs
normals basic.vs normals.fs
uvs basic.vs uvs.fs
occlusion basic.vs occlusion.fs
emissive basic.vs emissive.fs
light_multi basic.vs light_multi.fs
light_single basic.vs light_single.fs
shadowmap basic.vs shadowmap.fs
atlas quad.vs atlas.fs
gbuffers basic.vs gbuffers.fs
deferred_multi quad.vs deferred_multi.fs
deferred_single quad.vs deferred_single.fs
deferred_ws basic.vs deferred_multi.fs
ssao quad.vs ssao.fs
ao quad.vs ao.fs

\normal_functions
mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv)
{
    // get edge vectors of the pixel triangle
    vec3 dp1 = dFdx( p );
    vec3 dp2 = dFdy( p );
    vec2 duv1 = dFdx( uv );
    vec2 duv2 = dFdy( uv );
    
    // solve the linear system
    vec3 dp2perp = cross( dp2, N );
    vec3 dp1perp = cross( N, dp1 );
    vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
    vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;
 
    // construct a scale-invariant frame 
    float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
    return mat3( T * invmax, B * invmax, N );
}

// assume N, the interpolated vertex normal and 
// WP the world position
//vec3 normal_pixel = texture2D( normalmap, uv ).xyz; 
vec3 perturbNormal(vec3 N, vec3 WP, vec2 uv, vec3 normal_pixel)
{
    normal_pixel = normal_pixel * 255./127. - 128./127.;
    mat3 TBN = cotangent_frame(N, WP, uv);
    return normalize(TBN * normal_pixel);
}

\shadow_function
float shadow_fact(vec4 v_lightspace_position)
{
	//from homogeneus space to clip space
	vec2 shadow_uv = v_lightspace_position.xy / v_lightspace_position.w;

	//from clip space to uv space
	shadow_uv = shadow_uv * 0.5 + vec2(0.5);

	//get point depth [-1 .. +1] in non-linear space
	float real_depth = (v_lightspace_position.z - u_shadow_bias) / v_lightspace_position.w;
	real_depth = real_depth * 0.5 + 0.5;

	if( shadow_uv.x < 0.0 || shadow_uv.x > 1.0 || shadow_uv.y < 0.0 || shadow_uv.y > 1.0 ){
      		if (u_light_type == 2) {return 1.0;}
		else {return 0.0;}
	}

	//it is before near or behind far plane
	if(real_depth < 0.0 || real_depth > 1.0){
   		return 1.0;
	}
	
	float shadow_factor = 0.0;
	if (u_pcf)
	{
		vec2 texel_size = 1.0 / textureSize(shadowmap, 0);
		for(int x = -1; x <= 1; ++x)
		{
  			for(int y = -1; y <= 1; ++y)
  			{	
        			float shadow_depth = texture(shadowmap, shadow_uv.xy + vec2(x, y) * texel_size).x; 

				if( shadow_depth < real_depth ) { shadow_factor += 0.0; }
				else { shadow_factor += 1.0; }    
    			}    
		}
		shadow_factor /= 9.0;
	}
	else
	{
		float shadow_depth = texture(shadowmap, shadow_uv.xy).x; 
		//we can compare them, even if they are not linear
		if( shadow_depth < real_depth ) { shadow_factor += 0.0; }
		else { shadow_factor += 1.0; }  
	}

	return shadow_factor; 
}

\shadow_atlas_function
float shadow_fact(vec4 v_lightspace_position, int type, float bias, sampler2D atlas, vec3 uvs)
{
	//from homogeneus space to clip space
	vec2 shadow_uv = v_lightspace_position.xy / v_lightspace_position.w;

	//from clip space to uv space
	shadow_uv = shadow_uv * 0.5 + vec2(0.5);

	//read corresponding uv from atlas texture
	shadow_uv *= uvs.z;
	shadow_uv.x += uvs.x;
	shadow_uv.y += uvs.y;

	//get point depth [-1 .. +1] in non-linear space
	float real_depth = (v_lightspace_position.z - bias) / v_lightspace_position.w;
	real_depth = real_depth * 0.5 + 0.5;

	//it is outside on the sides
	if( shadow_uv.x < uvs.x || shadow_uv.x > (uvs.x+uvs.z) || shadow_uv.y < uvs.y || shadow_uv.y > (uvs.y+uvs.z) || real_depth < 0.0 || real_depth > 1.0 )
		return 1.0;
	
	float shadow_factor = 0.0;
	if (u_pcf)
	{
		vec2 texel_size = 1.0 / textureSize(atlas, 0);
		for(int x = -1; x <= 1; ++x)
		{
  			for(int y = -1; y <= 1; ++y)
  			{	
        			float shadow_depth = texture(atlas, shadow_uv + vec2(x, y) * texel_size).x; 

				if( shadow_depth < real_depth ) { shadow_factor += 0.0; }
				else { shadow_factor += 1.0; }    
    			}    
		}
		shadow_factor /= 9.0;
	}
	else
	{
		float shadow_depth = texture(atlas, shadow_uv).x; 
		//we can compare them, even if they are not linear
		if( shadow_depth < real_depth ) { shadow_factor += 0.0; }
		else { shadow_factor += 1.0; }  
	}

	return shadow_factor; 
}

\PBR_direct_functions

#define RECIPROCAL_PI 0.3183098861837697
const float PI = 3.14159265359;

//Fresnel equation for diffuse Burley
float F_Schlick2(float u, float f0, float f90) {
    return f0 + (f90 - f0) * pow(1.0 - u, 5.0);
}

// Diffuse Reflections: Disney BRDF using retro-reflections using F term, this is much more complex!!
float Fd_Burley ( const in float NoV, const in float NoL, const in float LoH, const in float roughness)
{
	float linearRoughness = roughness*roughness;
        float f90 = 0.5 + 2.0 * linearRoughness * LoH * LoH;
        float lightScatter = F_Schlick2(NoL, 1.0, f90);
        float viewScatter  = F_Schlick2(NoV, 1.0, f90);
        return lightScatter * viewScatter * RECIPROCAL_PI;
}
float Fd_Lambert()
{
	return 1.0 / PI;
}


// Geometry Term: Geometry masking/shadowing due to microfacets
float GGX(float NdotV, float k){
	return NdotV / (NdotV * (1.0 - k) + k);
}
	
float G_Smith( float NdotV, float NdotL, float roughness)
{
	float k = pow(roughness + 1.0, 2.0) / 8.0;
	return GGX(NdotL, k) * GGX(NdotV, k);
}

// Normal Distribution Function using GGX Distribution
float D_GGX (	const in float NoH, const in float roughness )
{
	float a = roughness * roughness;
	float a2 = a * a;
	float f = (NoH * NoH) * (a2 - 1.0) + 1.0;
	return a2 / (PI * f * f);
}

// Fresnel term with colorized fresnel
vec3 F_Schlick( const in float VoH, const in vec3 f0)
{
	float f = pow(1.0 - VoH, 5.0);
	return f0 + (vec3(1.0) - f0) * f;
}

//to compute the direct contribution to the light
vec3 compute_direct(vec3 color, float metallic, float roughness, float NdotH, float LdotH, float NdotV, float NdotL, int u_light_eq)
{
	//we compute the reflection in base to the color and the metalness
	vec3 F0 = vec3(0.04); //common material
	//vec3 F0 = vec3(0.5); //common material
	F0 = mix( F0, color.xyz, metallic );

	//metallic materials do not have diffuse
	vec3 diffuseColor = (1.0 - metallic) * color.xyz;

	//compute the specular
	// Normal Distribution Function
	float D = D_GGX( NdotH, roughness );

	// Fresnel Function
	vec3 F = F_Schlick( LdotH, F0 );

	// Visibility Function (shadowing/masking)
	float G = G_Smith( NdotV, NdotL, roughness );

	// Norm factor
	vec3 Fr_d = D * G * F;
	Fr_d /= (4.0 * NdotL * NdotV + 1e-6);

	vec3 Fd_d;
	if (u_light_eq == 1) // LAMBERTIAN
	{
       		vec3 kD = vec3(1.0) - F;
		Fd_d = diffuseColor * kD * Fd_Lambert(); 
	}
	else if(u_light_eq == 2) // BURLEY
		Fd_d = diffuseColor * Fd_Burley(NdotV, NdotL, LdotH, roughness); 

	//add diffuse and specular reflection
	vec3 direct = Fd_d + Fr_d;

	return direct;
}

\basic.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;
in vec4 a_color;

uniform vec3 u_camera_pos;

uniform mat4 u_model;
uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;
out vec4 v_color;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( v_position, 1.0) ).xyz;
	
	//store the color in the varying var to use it from the pixel shader
	v_color = a_color;

	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}

\quad.vs

#version 330 core

in vec3 a_vertex;
in vec2 a_coord;
out vec2 v_uv;

void main()
{	
	v_uv = a_coord;
	gl_Position = vec4( a_vertex, 1.0 );
}


\flat.fs

#version 330 core

uniform vec4 u_color;

out vec4 FragColor;

void main()
{
	FragColor = u_color;
}


\texture.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;
in vec4 v_color;

uniform vec3 u_camera_pos;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_alpha_cutoff;

out vec4 FragColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, v_uv );

	if(color.a < u_alpha_cutoff)
		discard;

	FragColor = color;
}

\normals.fs

#version 330 core

in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform vec3 u_camera_pos;
uniform sampler2D u_texture_normals;

out vec4 FragColor;

#include "normal_functions"

void main()
{
	vec2 uv = v_uv;
	vec3 normal_pixel = texture2D( u_texture_normals, uv ).xyz;

	vec3 N = normalize( v_normal );
	if (normal_pixel != vec3(0,0,0))
	{
		N = perturbNormal(N, v_world_position, v_uv, normal_pixel);
	}

	FragColor = vec4( abs(N), 1.0 );
}

\uvs.fs

#version 330 core

in vec2 v_uv;

out vec4 FragColor;

void main()
{
	FragColor = vec4( v_uv, 1.0, 1.0 );
}


\occlusion.fs

#version 330 core

in vec2 v_uv;
uniform sampler2D u_texture_metallic_roughness;

out vec4 FragColor;

void main()
{
	float occ = texture( u_texture_metallic_roughness, v_uv ).x;
	FragColor = vec4( occ, occ, occ, 1.0 );
}

\emissive.fs

#version 330 core

in vec2 v_uv;
uniform sampler2D u_texture_em;
uniform vec3 u_emissive;

out vec4 FragColor;

void main()
{
	vec4 emissive = vec4( u_emissive, 1.0 );
	emissive *= texture( u_texture_em, v_uv );
	FragColor = vec4( emissive.xyz, 1.0 );
}


\multi.fs

#version 330 core

in vec3 v_position;
in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform vec4 u_color;
uniform sampler2D u_texture;
uniform float u_time;
uniform float u_alpha_cutoff;

layout(location = 0) out vec4 FragColor;
layout(location = 1) out vec4 NormalColor;

void main()
{
	vec2 uv = v_uv;
	vec4 color = u_color;
	color *= texture( u_texture, uv );

	if(color.a < u_alpha_cutoff)
		discard;

	vec3 N = normalize(v_normal);

	FragColor = color;
	NormalColor = vec4(N,1.0);
}


\depth.fs

#version 330 core

uniform vec2 u_camera_nearfar;
uniform sampler2D u_texture; //depth map
uniform int u_cam_type;

in vec2 v_uv;
out vec4 FragColor;

void main()
{
	float n = u_camera_nearfar.x;
	float f = u_camera_nearfar.y;
	float z = texture2D(u_texture,v_uv).x;
	float color;
	//if (u_cam_type == 0) {color = z;}
	//else {color = n * (z + 1.0) / (f + n - z * (f - n));}
	color = n * (z + 1.0) / (f + n - z * (f - n));
	FragColor = vec4(color);
}


\instanced.vs

#version 330 core

in vec3 a_vertex;
in vec3 a_normal;
in vec2 a_coord;

in mat4 u_model;

uniform vec3 u_camera_pos;

uniform mat4 u_viewprojection;

//this will store the color for the pixel shader
out vec3 v_position;
out vec3 v_world_position;
out vec3 v_normal;
out vec2 v_uv;

void main()
{	
	//calcule the normal in camera space (the NormalMatrix is like ViewMatrix but without traslation)
	v_normal = (u_model * vec4( a_normal, 0.0) ).xyz;
	
	//calcule the vertex in object space
	v_position = a_vertex;
	v_world_position = (u_model * vec4( a_vertex, 1.0) ).xyz;
	
	//store the texture coordinates
	v_uv = a_coord;

	//calcule the position of the vertex using the matrices
	gl_Position = u_viewprojection * vec4( v_world_position, 1.0 );
}

\light_single.fs

#version 330 core

in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform vec3 u_camera_pos;
uniform vec3 u_ambient_light;
uniform vec3 u_emissive;
uniform vec4 u_color;

const int MAX_LIGHTS = 10;
uniform int u_num_lights;
uniform int u_shadow_count;

uniform bool u_pcf;

uniform vec3 u_light_position[MAX_LIGHTS];
uniform vec3 u_light_vector[MAX_LIGHTS];
uniform vec3 u_light_color[MAX_LIGHTS];
uniform vec3 u_light_uvs[MAX_LIGHTS];

uniform int u_light_type[MAX_LIGHTS];
uniform int u_shadows[MAX_LIGHTS];
uniform int u_light_eq;

uniform float u_light_cutoff[MAX_LIGHTS];
uniform float u_light_maxdist[MAX_LIGHTS];
uniform float u_light_intensity[MAX_LIGHTS];
uniform float u_light_exp[MAX_LIGHTS];
uniform float u_shadow_bias[MAX_LIGHTS];
uniform float u_alpha_cutoff;
uniform float u_metallic;
uniform float u_roughness;

uniform mat4 u_shadow_viewproj[MAX_LIGHTS];

uniform sampler2D u_texture;
uniform sampler2D u_texture_em;
uniform sampler2D u_texture_metallic_roughness;
uniform sampler2D u_texture_normals;
uniform sampler2D u_texture_atlas;

out vec4 FragColor;

#include "normal_functions"
#include "shadow_atlas_function"
#include "PBR_direct_functions"

void main()
{
	vec3 light = vec3( 0.0 );
	vec4 color = u_color;
	vec4 emissive = vec4( u_emissive, 1.0 );
	
	//Getting values from textures
	vec4 baseColor = texture( u_texture, v_uv );
	color *= baseColor;
	float metallic = texture(u_texture_metallic_roughness, v_uv).b;	 //metallic
	float roughness = texture(u_texture_metallic_roughness, v_uv).g; //roughness

	//maybe it doesnt have metallic roughness texture (white texture), then pass the uniform from material properties
	if (metallic == 1.0)
		metallic = u_metallic;
	if (roughness == 1.0)
		roughness = u_roughness;

	float occlusion =  texture( u_texture_metallic_roughness, v_uv ).x;
	emissive *= texture( u_texture_em, v_uv );
	vec3 normal_pixel = texture2D( u_texture_normals, v_uv ).xyz;

	//Check blending
	if(color.a < u_alpha_cutoff)
		discard;	

	//Normalizing interpolated normals
	vec3 N = normalize( v_normal );

	//Perturbing the normal if there is a normalmap
	if (normal_pixel != vec3(0,0,0))
	{
		N = perturbNormal(N, v_world_position, v_uv, normal_pixel);
	}

	//Defining the light vector
	vec3 L;
	vec3 V = normalize(u_camera_pos-v_world_position);

	//Summing the ambient light because it always is
	light += u_ambient_light;
	light *= occlusion;

	for (int i = 0; i < MAX_LIGHTS; ++i)
	{

		//Defining the position in light space
		vec4 v_lightspace_position = u_shadow_viewproj[i] * vec4(v_world_position, 1.0);

		//Defining all light attenuation factors
		float shadow_factor = 1.0;
		float spot_factor = 1.0;
		float att_factor = 1.0;

		if (i < u_num_lights)
		{
			//depending on the light type...
			if( u_light_type[i] == 2 ) //directional  light
			{
				//Normalizing the light vector
				L = normalize(-u_light_vector[i]);

				if (u_shadows[i]==1)
					shadow_factor = shadow_fact(v_lightspace_position, u_light_type[i], u_shadow_bias[i], u_texture_atlas, u_light_uvs[i]);

			}
			else //point and spot light
			{
				//Defining the light
				L = u_light_position[i] - v_world_position;
				
				//compute distance and define the attenuation factor
				float light_distance = length( L );

				//compute a linear attenuation factor
				att_factor = u_light_maxdist[i] - light_distance;

				//normalize factor
				att_factor /= u_light_maxdist[i];

				//ignore negative values
				att_factor = max( att_factor, 0.0 );

				//Normalizing L for the point and spot light dot products
				L = normalize(L);

				if (u_light_type[i] == 1) //spot light
				{
					spot_factor = 0.0;
					//Calculating the angle between vectors
					float cos_angle = dot(L, normalize(-u_light_vector[i]));

					if (cos_angle > u_light_cutoff[i])
					{
						//Calculating the spot factor depending on the angle
						spot_factor = pow(cos_angle, u_light_exp[i]);

						//Calculating the shadow factor
						if (u_shadows[i]==1)
							shadow_factor = shadow_fact(v_lightspace_position, u_light_type[i], u_shadow_bias[i], u_texture_atlas, u_light_uvs[i]);
					}
				}
			}
		}
		//Vectors & dot products
		vec3 H = normalize(L+V);
		float NdotL = max(dot(N,L),0.0);
		float NdotH = max(dot(N,H),0.0);
		float NdotV = max(dot(N,V),0.0);
		float LdotH = max(dot(L,H),0.0);

		//store the amount of diffuse light
		vec3 light_params = NdotL * u_light_intensity[i] * u_light_color[i] * spot_factor * att_factor * shadow_factor;

		if (u_light_eq == 0) 		// PHONG
			light += light_params;
		else 				// DIRECT
		{
			vec3 direct = compute_direct(baseColor.xyz, metallic, roughness, NdotH, LdotH, NdotV, NdotL, u_light_eq);
			light += direct * light_params;
		}
	}

	//Applying light to color
	color.xyz *= light;
	color.xyz += emissive.xyz;

	FragColor = color;
}

\light_multi.fs

#version 330 core

in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform mat4 u_shadow_viewproj;

uniform vec3 u_ambient_light;
uniform vec3 u_emissive;
uniform vec3 u_light_position;
uniform vec3 u_light_vector;
uniform vec3 u_light_color;
uniform vec4 u_color;
uniform vec3 u_camera_position;

uniform int u_light_type;
uniform int u_light_eq;

uniform float u_light_cutoff;
uniform float u_light_maxdist;
uniform float u_light_intensity;
uniform float u_light_exp;
uniform float u_shadow_bias;
uniform float u_alpha_cutoff;
uniform float u_metallic;
uniform float u_roughness;

uniform bool u_pcf;
uniform bool u_shadows;

uniform sampler2D u_texture;
uniform sampler2D u_texture_em;
uniform sampler2D u_texture_metallic_roughness;
uniform sampler2D u_texture_normals;
uniform sampler2D shadowmap;

uniform float u_scale;
uniform float u_average_lum;
uniform float u_lumwhite2;
uniform float u_igamma;

out vec4 FragColor;

#include "normal_functions"
#include "shadow_function"
#include "PBR_direct_functions"

void main()
{	
	vec3 light = vec3( 0.0 );
	vec4 color = u_color;
	vec4 emissive = vec4( u_emissive, 1.0 );

	//read from textures
	vec4 baseColor = texture( u_texture, v_uv ); 			 //albedo
	float metallic = texture(u_texture_metallic_roughness, v_uv).b;	 //metallic
	float roughness = texture(u_texture_metallic_roughness, v_uv).g; //roughness

	//maybe it doesnt have metallic roughness texture (white texture), then pass the uniform from material properties
	if (metallic == 1.0)
		metallic = u_metallic;
	if (roughness == 1.0)
		roughness = u_roughness;
	
	//Getting values from textures
	color *= baseColor;
	emissive *= texture( u_texture_em, v_uv );
	float occlusion =  texture( u_texture_metallic_roughness, v_uv ).x;
	vec3 normal_pixel = texture( u_texture_normals, v_uv ).xyz;

	//Check blending
	if(color.a < u_alpha_cutoff)
		discard;	

	//Normalizing interpolated normals
	vec3 N = normalize( v_normal );

	//Perturbing the normal if there is a normalmap
	if (normal_pixel != vec3(0,0,0))
	{
		N = perturbNormal(N, v_world_position, v_uv, normal_pixel);
	}
	//other useful vectors
	vec3 L;
	vec3 V = normalize(u_camera_position-v_world_position);

	//Defining the position in light space
	vec4 v_lightspace_position = u_shadow_viewproj * vec4(v_world_position, 1.0);	
	//Defining all light attenuation factors
	float shadow_factor = 1.0;
	float spot_factor = 1.0;
	float att_factor = 1.0;

	//Summing the ambient light because it always is
	light += u_ambient_light;
	light *= occlusion;
	
	//depending on the light type...
	if( u_light_type == 2 ) //directional  light
	{
		//Defining Normalizing the light vector		
		L = normalize(-u_light_vector);
		
		if (u_shadows) { shadow_factor = shadow_fact(v_lightspace_position); }
	}
	else //point and spot light
	{
		//Defining the light vector
		L = u_light_position - v_world_position;

		//Compute distance and define the attenuation factor
		float light_distance = length( L );

		//float b = 1.0/u_light_maxdist;
		//att_factor = exp(b*d) * (1-b*d);

		//compute a linear attenuation factor
		att_factor = u_light_maxdist - light_distance;

		//normalize factor
		att_factor /= u_light_maxdist;

		//ignore negative values
		att_factor = max( att_factor, 0.0 );

		//Normalizing L for the dot product
		L = normalize(L);

		if (u_light_type == 1) //spot light
		{
			spot_factor = 0.0;
			//Calculating the cos of the angle between vectors
			float cos_angle = dot(normalize(u_light_vector), -L);

			if (cos_angle > u_light_cutoff)
			{
				//Calculating the spot factor depending on the angle
				spot_factor = pow(cos_angle, u_light_exp);

				if (u_shadows) { shadow_factor = shadow_fact(v_lightspace_position); }
			}
		}
	}

	//Vectors & dot products
	vec3 H = normalize(L+V);
	float NdotL = max(dot(N,L),0.0);
	float NdotH = max(dot(N,H),0.0);
	float NdotV = max(dot(N,V),0.0);
	float LdotH = max(dot(L,H),0.0);

	//store the light parameters
	vec3 light_params = NdotL * u_light_color * spot_factor * att_factor * shadow_factor * u_light_intensity;

	if (u_light_eq == 0) 		// PHONG
		light += light_params;
	else 				// DIRECT
	{
		vec3 direct = compute_direct(baseColor.xyz, metallic, roughness, NdotH, LdotH, NdotV, NdotL, u_light_eq);
		light += direct * light_params;
	}

	//Applying light to color
	color.xyz *= light;
	color.xyz += emissive.xyz;

	FragColor = color;

	/*vec3 rgb = color.xyz;

	float lum = dot(rgb, vec3(0.2126, 0.7152, 0.0722));
  	float L_HDR = (u_scale / u_average_lum) * lum;
	float Ld = (L_HDR * (1.0 + L_HDR / u_lumwhite2)) / (1.0 + L_HDR);

    	rgb = (rgb / lum) * Ld;
    	rgb = max(rgb,vec3(0.001));
    	rgb = pow( rgb, vec3( u_igamma ) );

	
	FragColor = vec4(rgb, color.a);*/
}

\shadowmap.fs

#version 330 core

in vec2 v_uv;

uniform sampler2D u_texture;
uniform float u_alpha_cutoff;

out vec4 FragColor;

void main()
{
	vec4 color = texture( u_texture, v_uv );

	//Check blending
	if(color.a < u_alpha_cutoff)
		discard;

	FragColor = vec4(1.0);
}

\gbuffers.fs

#version 330 core

in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform mat4 u_viewmatrix;

uniform vec4 u_color;
uniform vec3 u_emissive;

uniform float u_alpha_cutoff;
uniform float u_metallic;
uniform float u_roughness;

uniform sampler2D u_texture;
uniform sampler2D u_texture_em;
uniform sampler2D u_texture_metallic_roughness;
uniform sampler2D u_texture_normals;

layout(location = 0) out vec4 FragColor;
layout(location = 1) out vec4 NormalColor;
layout(location = 2) out vec4 ExtraColor;

#include "normal_functions"
float dither4x4(vec2 position, float brightness)
{
  int x = int(mod(position.x, 4.0));
  int y = int(mod(position.y, 4.0));
  int index = x + y * 4;
  float limit = 0.0;

  if (x < 8) {
    if (index == 0) limit = 0.0625;
    if (index == 1) limit = 0.5625;
    if (index == 2) limit = 0.1875;
    if (index == 3) limit = 0.6875;
    if (index == 4) limit = 0.8125;
    if (index == 5) limit = 0.3125;
    if (index == 6) limit = 0.9375;
    if (index == 7) limit = 0.4375;
    if (index == 8) limit = 0.25;
    if (index == 9) limit = 0.75;
    if (index == 10) limit = 0.125;
    if (index == 11) limit = 0.625;
    if (index == 12) limit = 1.0;
    if (index == 13) limit = 0.5;
    if (index == 14) limit = 0.875;
    if (index == 15) limit = 0.375;
  }

  return brightness < limit ? 0.0 : 1.0;
}

void main()
{
	vec4 color = u_color;
	vec4 emissive = vec4( u_emissive, 1.0 );	

	//Getting values from textures
	color *= texture( u_texture, v_uv );
	emissive *= texture( u_texture_em, v_uv );

	if (color.a < 0.9 && dither4x4(gl_FragCoord.xy, color.a) == 0.0)
		discard;

	vec4 material_properties =  texture( u_texture_metallic_roughness, v_uv );
	float metallic = material_properties.b * u_metallic;
	float roughness = material_properties.g * u_roughness;

	//maybe it doesnt have metallic roughness texture (white texture), then pass the uniform from material properties
	if (metallic == 1.0)
		material_properties.b = u_metallic;
	if (roughness == 1.0)
		material_properties.g = u_roughness;

	vec3 N = normalize(v_normal);
	vec3 normal_pixel = texture( u_texture_normals, v_uv ).xyz;

	//Perturbing the normal if there is a normalmap
	if (normal_pixel != vec3(0,0,0))
	{
		N = perturbNormal(N, v_world_position, v_uv, normal_pixel);
	}

	FragColor = vec4(color.xyz, roughness);
	NormalColor = vec4(N * 0.5 + vec3(0.5), material_properties.r);
	ExtraColor = vec4(emissive.xyz, metallic);
}

\deferred_multi.fs

#version 330 core

uniform sampler2D u_color_texture;
uniform sampler2D u_normal_texture;
uniform sampler2D u_extra_texture;
uniform sampler2D u_depth_texture;
uniform sampler2D shadowmap;
uniform sampler2D u_texture_normals;
uniform sampler2D u_ao_texture;

uniform mat4 u_inverse_viewprojection;
uniform mat4 u_inv_viewmatrix;
uniform vec2 u_iRes;

in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform mat4 u_shadow_viewproj;

uniform vec3 u_camera_position;
uniform vec3 u_ambient_light;
uniform vec3 u_light_position;
uniform vec3 u_light_vector;
uniform vec3 u_light_color;
uniform vec4 u_color;

uniform int u_light_eq;
uniform int u_light_type;
uniform bool u_emissive;
uniform bool u_ao;

uniform float u_light_cutoff;
uniform float u_light_maxdist;
uniform float u_light_intensity;
uniform float u_light_exp;
uniform float u_shadow_bias;
uniform float u_alpha_cutoff;
uniform float u_ao_factor;

uniform bool u_pcf;
uniform bool u_shadows;
uniform bool u_back;
uniform bool u_hdr;

uniform float u_scale;
uniform float u_average_lum;
uniform float u_lumwhite2;
uniform float u_igamma;

//pass here all the uniforms required for illumination...
layout(location = 0) out vec4 FragColor;

#include "normal_functions"
#include "shadow_function"
#include "PBR_direct_functions"

void main()
{
	//extract uvs from pixel screenpos
    	vec2 uv = gl_FragCoord.xy * u_iRes.xy;  
    	vec4 colorbuffer = texture( u_color_texture, uv );
	vec4 normalbuffer = texture( u_normal_texture, uv );
	vec4 extrabuffer = texture( u_extra_texture, uv );

	vec3 color = colorbuffer.xyz;

    	//normals must be converted from 0..1 to -1..+1
    	vec3 N = texture( u_normal_texture, uv ).xyz * 2.0 - vec3(1.0);
    	N = normalize(N); //always normalize in case of data loss

   	//reconstruct world position from depth and inv. viewproj
    	float depth = texture( u_depth_texture, uv ).x;

	if (depth == 1.0 && u_back)
	{
		FragColor = vec4(color, 1.0);
		return;
	}	

    	vec4 screen_pos = vec4(uv.x*2.0-1.0, uv.y*2.0-1.0, depth*2.0-1.0, 1.0);
    	vec4 proj_worldpos = u_inverse_viewprojection * screen_pos;
    	vec3 worldpos = proj_worldpos.xyz / proj_worldpos.w;
	
	vec4 emissive;
	if (u_emissive)
		emissive = texture( u_extra_texture, uv );
	
	float occlusion;
	if (u_ao == true) 
	{  
	occlusion =  texture( u_ao_texture, uv ).r; 
	occlusion =  pow(occlusion, u_ao_factor);
	}
	else { occlusion = normalbuffer.a; }

	float metallic =  extrabuffer.a;
	float roughness =  colorbuffer.a;

	//other useful vectors
	vec3 L;
	vec3 V = normalize(u_camera_position - worldpos);

	//Defining the position in light space
	vec4 v_lightspace_position = u_shadow_viewproj * vec4(worldpos, 1.0);	
	//Defining all light attenuation factors
	float shadow_factor = 1.0;
	float spot_factor = 1.0;
	float att_factor = 1.0;
	
    	//now do your illumination using worldpos and the normal...
	//Summing the ambient light because it always is
	vec3 light = vec3(0.0);
	light += u_ambient_light;
	light *= occlusion;
	
	//depending on the light type...
	if( u_light_type == 2 ) //directional  light
	{
		//Defining Normalizing the light vector		
		L = normalize(-u_light_vector);
		
		//Defining the shadow_factor as 1.0 and checking if shadows are activated 
		if (u_shadows) { shadow_factor = shadow_fact(v_lightspace_position); }
	}
	else //point and spot light
	{
		//Defining the light vector
		L = u_light_position - worldpos;

		//Compute distance and define the attenuation factor
		float light_distance = length( L );

		//compute a linear attenuation factor
		att_factor = u_light_maxdist - light_distance;

		//normalize factor
		att_factor /= u_light_maxdist;

		//ignore negative values
		att_factor = max( att_factor, 0.0 );

		//Normalizing L for the point and spot light dot products
		L = normalize(L);

		if (u_light_type == 1) //spot light
		{
			spot_factor = 0.0;
			//Calculating the cos of the angle between vectors
			float cos_angle = dot(L, normalize(-u_light_vector));

			if (cos_angle > u_light_cutoff)
			{
				//Calculating the spot factor depending on the angle
				spot_factor = pow(cos_angle, u_light_exp);
	
				//Defining the shadow_factor as 1.0 and checking if shadows are activated 
				if (u_shadows) { shadow_factor = shadow_fact(v_lightspace_position); }
			}
		}
	}
	//Vectors & dot products
	vec3 H = normalize(L+V);
	float NdotL = max(dot(N,L),0.0);
	float NdotH = max(dot(N,H),0.0);
	float NdotV = max(dot(N,V),0.0);
	float LdotH = max(dot(L,H),0.0);

	//store the light parameters
	vec3 light_params = NdotL * u_light_color * spot_factor * att_factor * shadow_factor * u_light_intensity;

	if (u_light_eq == 0) 		// PHONG
		light += light_params;
	else 				// DIRECT
	{

		vec3 direct = compute_direct(color.xyz, metallic, roughness, NdotH, LdotH, NdotV, NdotL, u_light_eq);
		light += direct * light_params;
	}

	//Applying light to color
	color.xyz *= light;
	color.xyz += emissive.xyz;
	
	if (u_hdr)
	{
	vec3 rgb = color.xyz;

	float lum = dot(rgb, vec3(0.2126, 0.7152, 0.0722));
  	float L_HDR = (u_scale / u_average_lum) * lum;
	float Ld = (L_HDR * (1.0 + L_HDR / u_lumwhite2)) / (1.0 + L_HDR);

    	rgb = (rgb / lum) * Ld;
    	rgb = max(rgb,vec3(0.001));
    	rgb = pow( rgb, vec3( u_igamma ) );

	
	FragColor = vec4(rgb, 1.0);
	}
	else {FragColor = vec4(color, 1.0);}
}

\atlas.fs

#version 330 core

const int MAX_LIGHTS = 10;
uniform vec2 u_camera_nearfars[MAX_LIGHTS];
uniform int u_light_types[MAX_LIGHTS];
uniform int u_total_lights;
uniform sampler2D u_texture; //atlas
in vec2 v_uv;
out vec4 FragColor;

void main()
{
	float color = 0.0;
	vec2 uvs = v_uv;
	//we want to know to which light would the position uv correspond
	//atlas matrix will have dimension dim x dim
	float dim = ceil(sqrt(u_total_lights));
	int row = -1;
	int col = -1;
	for(int i=0;i<dim;++i){
		float len = (i*1.0)/dim;
		if(uvs.x>len)
			col++;
		if(uvs.y>len)
			row++;
	}
	int c = int(dim)*row + col; //now we know the index of the current light
	float n = u_camera_nearfars[c].x;
	float f = u_camera_nearfars[c].y;
	float z = texture2D(u_texture,v_uv).x;
	//if light is spotlight use non-linear transformation
	if (u_light_types[c] == 1)
		color = n * (z + 1.0) / (f + n - z * (f - n));
	//else pass the z value to the color
	else if (u_light_types[c] == 2)
		color = z;

	FragColor = vec4(color);
}

\ssao.fs

#version 330 core
in vec2 v_uv;

uniform int u_samples;

#define MAX_SAMPLES 512

uniform mat4 u_inverse_viewprojection;
uniform mat4 u_viewprojection;

uniform sampler2D u_depth_texture;
uniform sampler2D u_normal_texture;

uniform vec2 u_iRes;
 
uniform vec3 u_points[MAX_SAMPLES];

out vec4 FragColor;

//from this github repo
mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv)
{
    // get edge vectors of the pixel triangle
    vec3 dp1 = dFdx( p );
    vec3 dp2 = dFdy( p );
    vec2 duv1 = dFdx( uv );
    vec2 duv2 = dFdy( uv );
    
    // solve the linear system
    vec3 dp2perp = cross( dp2, N );
    vec3 dp1perp = cross( N, dp1 );
    vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
    vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;
 
    // construct a scale-invariant frame 
    float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
    return mat3( T * invmax, B * invmax, N );
}

void main()
{
	//we want to center the sample in the center of the pixel
	vec2 uv = v_uv + u_iRes * 0.5;

	//read depth from depth buffer
	float depth = texture( u_depth_texture, uv ).x;
	vec3 normal = texture( u_normal_texture, uv ).xyz;

	//ignore pixels in the background
	if(depth >= 1.0)
	{
   		FragColor = vec4(1.0);
    		return;
	}

	//create screenpos with the right depth
	vec4 screen_position = vec4(uv*2.0 - vec2(1.0), depth*2.0 - 1.0,1.0);

	//reproject
	vec4 proj_worldpos = u_inverse_viewprojection * screen_position;
	vec3 worldpos = proj_worldpos.xyz / proj_worldpos.w;

	int num = u_samples; //num samples that passed the are outside

	//to create the matrix33 to convert from tangent to world
	mat3 rotmat = cotangent_frame( normal, worldpos, uv );

	//for every sample around the point
	for (int i = 0; i < MAX_SAMPLES; ++i)
	{
		if (i < u_samples)
		{
			vec3 rotated_point = rotmat * u_points[i];

   			//compute is world position using the random
    			vec3 p = worldpos + rotated_point * 10.0;

    			//find the uv in the depth buffer of this point
    			vec4 proj = u_viewprojection * vec4(p,1.0);
    			proj.xy /= proj.w; //convert to clipspace from homogeneous
    			//apply a tiny bias to its z before converting to clip-space
    			proj.z = (proj.z - 0.005) / proj.w;
    			proj.xyz = proj.xyz * 0.5 + vec3(0.5); //to [0..1]
    			//read p true depth
    			float pdepth = texture( u_depth_texture, proj.xy ).x;
    			//compare true depth with its depth
    			if( pdepth < proj.z ) //if true depth smaller, is inside
        			num--; //remove this point from the list of visible
		}
	}

	//finally, compute the AO factor as the ratio of visible points
	float ao = float(num) / float(u_samples);

	FragColor = vec4(ao);
}

\ao.fs

#version 330 core

in vec2 v_uv;

uniform sampler2D u_texture;

out vec4 FragColor;

void main()
{
	vec2 uv = v_uv;
	float color = texture( u_texture, v_uv ).r;

	FragColor = vec4(color,color,color,1.0);
}