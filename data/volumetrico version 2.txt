\volume2.fs

#version 330 core

uniform sampler2D u_color_texture;
uniform sampler2D u_normal_texture;
uniform sampler2D u_extra_texture;
uniform sampler2D u_depth_texture;
uniform sampler2D shadowmap;
uniform sampler2D u_texture_normals;
uniform sampler2D u_ao_texture;
uniform sampler2D u_probes_texture;
uniform sampler2D u_irr_texture;

uniform mat4 u_inverse_viewprojection;
uniform mat4 u_inv_viewmatrix;
uniform vec2 u_iRes;

in vec3 v_world_position;
in vec3 v_normal;
in vec2 v_uv;

uniform mat4 u_shadow_viewproj;

uniform vec3 u_camera_position;
uniform vec3 u_ambient_light;
uniform vec3 u_light_position;
uniform vec3 u_light_vector;
uniform vec3 u_light_color;
uniform vec4 u_color;

uniform int u_light_eq;
uniform int u_light_type;
uniform bool u_emissive;
uniform bool u_ao;
uniform bool u_irr;

uniform float u_light_cutoff;
uniform float u_light_maxdist;
uniform float u_light_intensity;
uniform float u_light_exp;
uniform float u_shadow_bias;
uniform float u_alpha_cutoff;
uniform float u_ao_factor;

uniform bool u_pcf;
uniform bool u_shadows;
uniform bool u_back;
uniform bool u_hdr;

uniform float u_gamma;

uniform mat4 u_invmodel_grid;
uniform vec3 u_irr_dims;
uniform int u_num_probes;

#define SAMPLES 128

//pass here all the uniforms required for illumination...
out vec4 FragColor;

#include "shadow_function"

void main()
{
	//extract uvs from pixel screenpos
    	vec2 uv =  v_uv;// gl_FragCoord.xy * u_iRes.xy;  

   	//reconstruct world position from depth and inv. viewproj
    	float depth = texture( u_depth_texture, uv ).x;

    	vec4 screen_pos = vec4(uv.x*2.0-1.0, uv.y*2.0-1.0, depth*2.0-1.0, 1.0);
    	vec4 proj_worldpos = u_inverse_viewprojection * screen_pos;
    	vec3 worldpos = proj_worldpos.xyz / proj_worldpos.w;

	vec3 ray_dir = (worldpos - u_camera_position);
	float dist = min(length(ray_dir), 500.0);
	ray_dir /= dist;
	float step_dist = dist / float(SAMPLES);
	float air_density = 0.001;
	
	vec3 current_pos = u_camera_position;
	vec3 ray_offset = (ray_dir) * step_dist;

	float transparency = 1.0;

	vec3 color = vec3(0.0);
	for(int i = 0; i < SAMPLES; ++i)
	{
    		//evaluate contribution
		float pixel_transparency = air_density * step_dist;

		transparency -= pixel_transparency;

		vec4 v_lightspace_position = u_shadow_viewproj * vec4(current_pos, 1.0);

		float shadow_factor = shadow_fact(v_lightspace_position);
		color += shadow_factor * u_light_color * pixel_transparency;

		if (transparency < 0.001)
			break;

    		//advance to next position
    		current_pos.xyz += ray_offset;
	}

	float fog_factor = clamp( 1.0 - (500 - dist) / (500 - 100),0.0,1.0);
	vec3 terrain_color = texture(u_color_texture, v_uv).xyz;

	vec3 final_color = mix( terrain_color, color, fog_factor );
		
	FragColor = vec4(final_color, 1.0);

}